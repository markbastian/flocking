{:rename-macros {}, :renames {}, :externs {document {getElementById {}, body {}}, window {onkeydown {}}, setInterval {}}, :use-macros {go cljs.core.async.macros, go-loop cljs.core.async.macros}, :excludes #{}, :name flocking.core, :imports nil, :requires {reagent reagent.core, reagent.core reagent.core, cljs.core.async cljs.core.async, gl flocking.game-launcher, flocking.game-launcher flocking.game-launcher, rules flocking.rules, flocking.rules flocking.rules, sim flocking.simulation, flocking.simulation flocking.simulation}, :cljs.spec/speced-vars [], :uses {timeout cljs.core.async, atom reagent.core, <! cljs.core.async, close! cljs.core.async, chan cljs.core.async, >! cljs.core.async, put! cljs.core.async}, :defs {with-rotation {:protocol-inline nil, :meta {:file "/Users/mbastian/workspace/flocking/src/cljs/flocking/core.cljs", :line 11, :column 7, :end-line 11, :end-column 20, :arglists (quote ([]))}, :name flocking.core/with-rotation, :variadic false, :file "src/cljs/flocking/core.cljs", :end-column 20, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 11, :end-line 11, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, triangle {:protocol-inline nil, :meta {:file "/Users/mbastian/workspace/flocking/src/cljs/flocking/core.cljs", :line 13, :column 7, :end-line 13, :end-column 15, :arglists (quote ([x0 y0 x1 y1 x2 y2]))}, :name flocking.core/triangle, :variadic false, :file "src/cljs/flocking/core.cljs", :end-column 15, :method-params ([x0 y0 x1 y1 x2 y2]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 13, :end-line 13, :max-fixed-arity 6, :fn-var true, :arglists (quote ([x0 y0 x1 y1 x2 y2]))}, render {:protocol-inline nil, :meta {:file "/Users/mbastian/workspace/flocking/src/cljs/flocking/core.cljs", :line 18, :column 7, :end-line 18, :end-column 13, :arglists (quote ([state]))}, :name flocking.core/render, :variadic false, :file "src/cljs/flocking/core.cljs", :end-column 13, :method-params ([state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 18, :end-line 18, :max-fixed-arity 1, :fn-var true, :arglists (quote ([state]))}, on-js-reload {:protocol-inline nil, :meta {:file "/Users/mbastian/workspace/flocking/src/cljs/flocking/core.cljs", :line 71, :column 7, :end-line 71, :end-column 19, :arglists (quote ([]))}, :name flocking.core/on-js-reload, :variadic false, :file "src/cljs/flocking/core.cljs", :end-column 19, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 71, :end-line 71, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}}, :cljs.spec/registry-ref [], :require-macros {cljs.core.async.macros cljs.core.async.macros, reagent reagent.core, reagent.core reagent.core}, :cljs.analyzer/constants {:seen #{:y :boids :stroke :transform :key :overflow :fill :time :cyan :width :state :points :style :div :world :food :padding :svg :x :rect :none :height :polygon :margin :black}, :order [:polygon :points :transform :stroke :fill :cyan :none :world :boids :food :time :div :svg :style :width :height :margin :overflow :padding :rect :x :y :black :state :key]}, :doc nil}
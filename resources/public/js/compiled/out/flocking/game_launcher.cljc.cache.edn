{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{}, :name flocking.game-launcher, :imports nil, :requires {flocking.quil-renderer flocking.quil-renderer, sim flocking.simulation, q quil.core, qr flocking.quil-renderer, m quil.middleware, quil.core quil.core, quil.middleware quil.middleware, rules flocking.rules, flocking.simulation flocking.simulation, flocking.rules flocking.rules}, :cljs.spec/speced-vars [], :uses nil, :defs {rand-range {:protocol-inline nil, :meta {:file "/Users/mbastian/workspace/flocking/src/cljc/flocking/game_launcher.cljc", :line 9, :column 7, :end-line 9, :end-column 17, :arglists (quote ([lo hi]))}, :name flocking.game-launcher/rand-range, :variadic false, :file "/Users/mbastian/workspace/flocking/src/cljc/flocking/game_launcher.cljc", :end-column 17, :method-params ([lo hi]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 9, :end-line 9, :max-fixed-arity 2, :fn-var true, :arglists (quote ([lo hi]))}, gen-pos {:protocol-inline nil, :meta {:file "/Users/mbastian/workspace/flocking/src/cljc/flocking/game_launcher.cljc", :line 12, :column 7, :end-line 12, :end-column 14, :arglists (quote ([{:keys [minx maxx miny maxy]}]))}, :name flocking.game-launcher/gen-pos, :variadic false, :file "/Users/mbastian/workspace/flocking/src/cljc/flocking/game_launcher.cljc", :end-column 14, :method-params ([p__41168]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 12, :end-line 12, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [minx maxx miny maxy]}]))}, gen-state {:protocol-inline nil, :meta {:file "/Users/mbastian/workspace/flocking/src/cljc/flocking/game_launcher.cljc", :line 15, :column 7, :end-line 15, :end-column 16, :arglists (quote ([{:keys [minx maxx miny maxy]}]))}, :name flocking.game-launcher/gen-state, :variadic false, :file "/Users/mbastian/workspace/flocking/src/cljc/flocking/game_launcher.cljc", :end-column 16, :method-params ([p__41171]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 15, :end-line 15, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [minx maxx miny maxy]}]))}, setup {:protocol-inline nil, :meta {:file "/Users/mbastian/workspace/flocking/src/cljc/flocking/game_launcher.cljc", :line 18, :column 7, :end-line 18, :end-column 12, :arglists (quote ([num-boids]))}, :name flocking.game-launcher/setup, :variadic false, :file "/Users/mbastian/workspace/flocking/src/cljc/flocking/game_launcher.cljc", :end-column 12, :method-params ([num-boids]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 18, :end-line 18, :max-fixed-arity 1, :fn-var true, :arglists (quote ([num-boids]))}, launch-sketch {:protocol-inline nil, :meta {:file "/Users/mbastian/workspace/flocking/src/cljc/flocking/game_launcher.cljc", :line 39, :column 7, :end-line 39, :end-column 20, :arglists (quote ([{:keys [width height host num-boids]}]))}, :name flocking.game-launcher/launch-sketch, :variadic false, :file "/Users/mbastian/workspace/flocking/src/cljc/flocking/game_launcher.cljc", :end-column 20, :method-params ([p__41179]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 39, :end-line 39, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [width height host num-boids]}]))}, launch-app {:protocol-inline nil, :meta {:file "/Users/mbastian/workspace/flocking/src/cljc/flocking/game_launcher.cljc", :line 51, :column 25, :end-line 51, :end-column 35, :export true, :arglists (quote ([host width height num-boids]))}, :name flocking.game-launcher/launch-app, :variadic false, :file "/Users/mbastian/workspace/flocking/src/cljc/flocking/game_launcher.cljc", :end-column 35, :method-params ([host width height num-boids]), :protocol-impl nil, :export true, :arglists-meta (nil nil), :column 10, :line 51, :end-line 51, :max-fixed-arity 4, :fn-var true, :arglists (quote ([host width height num-boids]))}}, :cljs.spec/registry-ref [], :require-macros {q quil.core, quil.core quil.core}, :cljs.analyzer/constants {:seen #{:align :boids :color :separate :maxx :minx :width :max-speed :update :debug :state :behaviors :size :title :setup :middleware :world :host :food :wander :strength :num-boids :maxy :draw :miny :range :height :cohere}, :order [:minx :maxx :miny :maxy :world :boids :food :width :height :color :max-speed :state :behaviors :wander :separate :align :cohere :strength :debug :range :host :num-boids :title :setup :draw :update :middleware :size]}, :doc nil}
{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{}, :name flocking.quil-renderer, :imports nil, :requires {q quil.core, quil.core quil.core}, :cljs.spec/speced-vars [], :uses nil, :defs {debug-wander {:protocol-inline nil, :meta {:file "/Users/mbastian/workspace/flocking/src/cljc/flocking/quil_renderer.cljc", :line 4, :column 7, :end-line 4, :end-column 19, :arglists (quote ([{{{:keys [direction strength rate debug]} :wander} :behaviors}]))}, :name flocking.quil-renderer/debug-wander, :variadic false, :file "/Users/mbastian/workspace/flocking/src/cljc/flocking/quil_renderer.cljc", :end-column 19, :method-params ([p__40283]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 4, :end-line 4, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{{{:keys [direction strength rate debug]} :wander} :behaviors}]))}, draw-boid {:protocol-inline nil, :meta {:file "/Users/mbastian/workspace/flocking/src/cljc/flocking/quil_renderer.cljc", :line 26, :column 7, :end-line 26, :end-column 16, :arglists (quote ([{[pos [vx vy]] :state, :keys [width height color], :as boid}]))}, :name flocking.quil-renderer/draw-boid, :variadic false, :file "/Users/mbastian/workspace/flocking/src/cljc/flocking/quil_renderer.cljc", :end-column 16, :method-params ([p__40290]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 26, :end-line 26, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{[pos [vx vy]] :state, :keys [width height color], :as boid}]))}, draw {:protocol-inline nil, :meta {:file "/Users/mbastian/workspace/flocking/src/cljc/flocking/quil_renderer.cljc", :line 39, :column 7, :end-line 39, :end-column 11, :arglists (quote ([{:keys [world boids]}]))}, :name flocking.quil-renderer/draw, :variadic false, :file "/Users/mbastian/workspace/flocking/src/cljc/flocking/quil_renderer.cljc", :end-column 11, :method-params ([p__40299]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 39, :end-line 39, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [world boids]}]))}}, :cljs.spec/registry-ref [], :require-macros {q quil.core, quil.core quil.core}, :cljs.analyzer/constants {:seen #{:boids :color :maxx :minx :width :debug :state :behaviors :rate :world :wander :strength :maxy :miny :direction :height}, :order [:behaviors :wander :direction :strength :rate :debug :state :width :height :color :world :boids :minx :maxx :miny :maxy]}, :doc nil}
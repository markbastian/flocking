{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{}, :name flocking.rules, :imports nil, :requires {vec vecmath.vec, vecmath.vec vecmath.vec}, :cljs.spec/speced-vars [], :uses nil, :defs {initial-state {:protocol-inline nil, :meta {:file "/Users/mbastian/workspace/flocking/src/cljc/flocking/rules.cljc", :line 54, :column 7, :end-line 54, :end-column 20, :arglists (quote ([num-boids dim]))}, :name flocking.rules/initial-state, :variadic false, :file "/Users/mbastian/workspace/flocking/src/cljc/flocking/rules.cljc", :end-column 20, :method-params ([num-boids dim]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 54, :end-line 54, :max-fixed-arity 2, :fn-var true, :arglists (quote ([num-boids dim]))}, cohere {:protocol-inline nil, :meta {:file "/Users/mbastian/workspace/flocking/src/cljc/flocking/rules.cljc", :line 37, :column 7, :end-line 37, :end-column 13, :arglists (quote ([{:keys [strength]} {:keys [state]} {:keys [average-position]}]))}, :name flocking.rules/cohere, :variadic false, :file "/Users/mbastian/workspace/flocking/src/cljc/flocking/rules.cljc", :end-column 13, :method-params ([p__41108 p__41109 p__41110]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 37, :end-line 37, :max-fixed-arity 3, :fn-var true, :arglists (quote ([{:keys [strength]} {:keys [state]} {:keys [average-position]}]))}, align {:protocol-inline nil, :meta {:file "/Users/mbastian/workspace/flocking/src/cljc/flocking/rules.cljc", :line 34, :column 7, :end-line 34, :end-column 12, :arglists (quote ([{:keys [strength]} {:keys [state]} {:keys [average-velocity]}]))}, :name flocking.rules/align, :variadic false, :file "/Users/mbastian/workspace/flocking/src/cljc/flocking/rules.cljc", :end-column 12, :method-params ([p__41099 p__41100 p__41101]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 34, :end-line 34, :max-fixed-arity 3, :fn-var true, :arglists (quote ([{:keys [strength]} {:keys [state]} {:keys [average-velocity]}]))}, gen-state {:protocol-inline nil, :meta {:file "/Users/mbastian/workspace/flocking/src/cljc/flocking/rules.cljc", :line 51, :column 7, :end-line 51, :end-column 16, :arglists (quote ([{:keys [minx maxx miny maxy]}]))}, :name flocking.rules/gen-state, :variadic false, :file "/Users/mbastian/workspace/flocking/src/cljc/flocking/rules.cljc", :end-column 16, :method-params ([p__41120]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 51, :end-line 51, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [minx maxx miny maxy]}]))}, gen-pos {:protocol-inline nil, :meta {:file "/Users/mbastian/workspace/flocking/src/cljc/flocking/rules.cljc", :line 48, :column 7, :end-line 48, :end-column 14, :arglists (quote ([{:keys [minx maxx miny maxy]}]))}, :name flocking.rules/gen-pos, :variadic false, :file "/Users/mbastian/workspace/flocking/src/cljc/flocking/rules.cljc", :end-column 14, :method-params ([p__41117]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 48, :end-line 48, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [minx maxx miny maxy]}]))}, separate {:protocol-inline nil, :meta {:file "/Users/mbastian/workspace/flocking/src/cljc/flocking/rules.cljc", :line 20, :column 7, :end-line 20, :end-column 15, :arglists (quote ([{:keys [range strength]} {:keys [state]} {:keys [boids]}]))}, :name flocking.rules/separate, :variadic false, :file "/Users/mbastian/workspace/flocking/src/cljc/flocking/rules.cljc", :end-column 15, :method-params ([p__41073 p__41074 p__41075]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 20, :end-line 20, :max-fixed-arity 3, :fn-var true, :arglists (quote ([{:keys [range strength]} {:keys [state]} {:keys [boids]}]))}, tovec {:protocol-inline nil, :meta {:file "/Users/mbastian/workspace/flocking/src/cljc/flocking/rules.cljc", :line 11, :column 7, :end-line 11, :end-column 12, :arglists (quote ([m d]))}, :name flocking.rules/tovec, :variadic false, :file "/Users/mbastian/workspace/flocking/src/cljc/flocking/rules.cljc", :end-column 12, :method-params ([m d]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 11, :end-line 11, :max-fixed-arity 2, :fn-var true, :arglists (quote ([m d]))}, update-wander {:protocol-inline nil, :meta {:file "/Users/mbastian/workspace/flocking/src/cljc/flocking/rules.cljc", :line 8, :column 7, :end-line 8, :end-column 20, :arglists (quote ([{:keys [rate], :as s}]))}, :name flocking.rules/update-wander, :variadic false, :file "/Users/mbastian/workspace/flocking/src/cljc/flocking/rules.cljc", :end-column 20, :method-params ([p__41061]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 8, :end-line 8, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [rate], :as s}]))}, gen-wander {:protocol-inline nil, :meta {:file "/Users/mbastian/workspace/flocking/src/cljc/flocking/rules.cljc", :line 40, :column 7, :end-line 40, :end-column 17, :arglists (quote ([]))}, :name flocking.rules/gen-wander, :variadic false, :file "/Users/mbastian/workspace/flocking/src/cljc/flocking/rules.cljc", :end-column 17, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 40, :end-line 40, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, wander {:protocol-inline nil, :meta {:file "/Users/mbastian/workspace/flocking/src/cljc/flocking/rules.cljc", :line 13, :column 7, :end-line 13, :end-column 13, :arglists (quote ([{:keys [direction strength]} {:keys [state]} _]))}, :name flocking.rules/wander, :variadic false, :file "/Users/mbastian/workspace/flocking/src/cljc/flocking/rules.cljc", :end-column 13, :method-params ([p__41067 p__41068 _]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 13, :end-line 13, :max-fixed-arity 3, :fn-var true, :arglists (quote ([{:keys [direction strength]} {:keys [state]} _]))}, weighted-vec {:protocol-inline nil, :meta {:file "/Users/mbastian/workspace/flocking/src/cljc/flocking/rules.cljc", :line 27, :column 7, :end-line 27, :end-column 19, :arglists (quote ([vec strength average-vec]))}, :name flocking.rules/weighted-vec, :variadic false, :file "/Users/mbastian/workspace/flocking/src/cljc/flocking/rules.cljc", :end-column 19, :method-params ([vec strength average-vec]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 27, :end-line 27, :max-fixed-arity 3, :fn-var true, :arglists (quote ([vec strength average-vec]))}, rand-range {:protocol-inline nil, :meta {:file "/Users/mbastian/workspace/flocking/src/cljc/flocking/rules.cljc", :line 45, :column 7, :end-line 45, :end-column 17, :arglists (quote ([lo hi]))}, :name flocking.rules/rand-range, :variadic false, :file "/Users/mbastian/workspace/flocking/src/cljc/flocking/rules.cljc", :end-column 17, :method-params ([lo hi]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 45, :end-line 45, :max-fixed-arity 2, :fn-var true, :arglists (quote ([lo hi]))}}, :cljs.spec/registry-ref [], :require-macros nil, :cljs.analyzer/constants {:seen #{:align :boids :color :separate :maxx :minx :width :max-speed :debug :state :behaviors :rate :average-position :world :food :wander :strength :average-velocity :maxy :miny :direction :range :height :cohere}, :order [:rate :direction :strength :state :range :boids :average-velocity :average-position :minx :maxx :miny :maxy :world :food :width :height :color :max-speed :behaviors :wander :separate :align :cohere :debug]}, :doc nil}
{:rename-macros {}, :renames {}, :externs {Date {prototype {getTime {}}}}, :use-macros {}, :excludes #{}, :name flocking.simulation, :imports nil, :requires {rules flocking.rules, flocking.rules flocking.rules, vec vecmath.vec, vecmath.vec vecmath.vec}, :cljs.spec/speced-vars [], :uses nil, :defs {w {:protocol-inline nil, :meta {:file "/Users/mbastian/workspace/flocking/src/cljc/flocking/simulation.cljc", :line 5, :column 7, :end-line 5, :end-column 8, :arglists (quote ([v lo hi]))}, :name flocking.simulation/w, :variadic false, :file "/Users/mbastian/workspace/flocking/src/cljc/flocking/simulation.cljc", :end-column 8, :method-params ([v lo hi]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 5, :end-line 5, :max-fixed-arity 3, :fn-var true, :arglists (quote ([v lo hi]))}, wrap {:protocol-inline nil, :meta {:file "/Users/mbastian/workspace/flocking/src/cljc/flocking/simulation.cljc", :line 15, :column 7, :end-line 15, :end-column 11, :arglists (quote ([state {:keys [minx maxx miny maxy]}]))}, :name flocking.simulation/wrap, :variadic false, :file "/Users/mbastian/workspace/flocking/src/cljc/flocking/simulation.cljc", :end-column 11, :method-params ([state p__41134]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 15, :end-line 15, :max-fixed-arity 2, :fn-var true, :arglists (quote ([state {:keys [minx maxx miny maxy]}]))}, steer {:name flocking.simulation/steer, :file "/Users/mbastian/workspace/flocking/src/cljc/flocking/simulation.cljc", :line 20, :column 1, :end-line 20, :end-column 16, :meta {:file "/Users/mbastian/workspace/flocking/src/cljc/flocking/simulation.cljc", :line 20, :column 11, :end-line 20, :end-column 16}, :tag cljs.core/MultiFn}, sim-boid {:protocol-inline nil, :meta {:file "/Users/mbastian/workspace/flocking/src/cljc/flocking/simulation.cljc", :line 26, :column 7, :end-line 26, :end-column 15, :arglists (quote ([{:keys [state max-speed behaviors], :as boid} world-state dt]))}, :name flocking.simulation/sim-boid, :variadic false, :file "/Users/mbastian/workspace/flocking/src/cljc/flocking/simulation.cljc", :end-column 15, :method-params ([p__41139 world-state dt]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 26, :end-line 26, :max-fixed-arity 3, :fn-var true, :arglists (quote ([{:keys [state max-speed behaviors], :as boid} world-state dt]))}, averages {:protocol-inline nil, :meta {:file "/Users/mbastian/workspace/flocking/src/cljc/flocking/simulation.cljc", :line 38, :column 7, :end-line 38, :end-column 15, :arglists (quote ([{:keys [boids], :as state}]))}, :name flocking.simulation/averages, :variadic false, :file "/Users/mbastian/workspace/flocking/src/cljc/flocking/simulation.cljc", :end-column 15, :method-params ([p__41158]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 38, :end-line 38, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [boids], :as state}]))}, sim {:protocol-inline nil, :meta {:file "/Users/mbastian/workspace/flocking/src/cljc/flocking/simulation.cljc", :line 47, :column 7, :end-line 47, :end-column 10, :arglists (quote ([state]))}, :name flocking.simulation/sim, :variadic false, :file "/Users/mbastian/workspace/flocking/src/cljc/flocking/simulation.cljc", :end-column 10, :method-params ([state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 47, :end-line 47, :max-fixed-arity 1, :fn-var true, :arglists (quote ([state]))}}, :cljs.spec/registry-ref [], :require-macros nil, :cljs.analyzer/constants {:seen #{:align :boids :else :separate :default :maxx :minx :time :max-speed :state :behaviors :average-position :world :wander :average-velocity :maxy :hierarchy :miny :cohere}, :order [:else :minx :maxx :miny :maxy :state :hierarchy :default :wander :separate :align :cohere :max-speed :behaviors :world :boids :average-position :average-velocity :time]}, :doc nil}